			


			<header></header>
			   语义：文档的头部或者页面的头部
			<nav></nav>
			    语义：导航
			<footer></footer>
			    语义；文档的脚部或者页面的脚部，通常用来包含文档的版权信息 或者授权 或者授权友情链接
			 <aside></asdie>
			     语义；侧边栏 或者附属信息
			 <hgroup></hgroup>
			      语义；标题的集合，可以用来包含多个h1~h6的标签

			 <figure></figure>
			      语义；图片区域，可以包含多个或者一个figcaption，figcaption用来表示图片标题
			 <figcaption></figcaption>
			      语义：图片区域的标题，一般写在figure

			 <section></section>
			      语义：分区，  页面的或者文档的一部分区域，有独立的内容，但结构相近，就可以用section可以包含 header h1~h6 等等

			 <article></article>
			      语义；独立的内容，可以是文章  blog  帖子 短文或者回复 评论


CSS3子代 兄弟 同级通用 属性选择器


       子选择器：>
             作用范围：div下的span会有享受样式，p里的不享受，原因，p里的span是孙子

        相邻兄弟选择器；+
             作用范围；可以选择相邻的两个元素，元素一定要有同一个父级，+后面的元素享受样式


         同级元素通用选择器：~
              作用范围；所有相同父级中，位于p标签之后的同级的span标签 享受样式
              p~span{

              }    

    属性选择器；

          第一种
              选择带有某种属性的所有元素
              例如  a[属性名]{...}

           
           第二种
                选择带有某种属性，并且规定属性值的元素     
                  input[属性名="属性值"]{
                  。。。
                  }
            


         伪类选择器；


               伪类；是一种特殊的属性，可以理解为表示一种状态

            动态伪类，因为这些伪类并不存在于HTML中,而只有当用户和网站交互的时候才能体现出来，动态伪类包含两种，第一种是我们在链接中常看到的锚点伪类，如":link",":visited";另外一种被称作用户行为伪类，如“:hover”,":active"和":focus"。先来看最常见的锚点伪类

锚点伪类；
      a:link{color:gray;}/*链接没有被访问颜色为灰色*/
      a:visited{color:yellow;}/*链接被访问过后颜色为黄色*/
      a:hover{color:green;}/*鼠标悬浮在连接上时颜色为绿色*/
      a:active{color:blue;}/*鼠标点中激活链接那一下颜色为蓝色*/

     　　　　　　 对于这四个锚点伪类的设置，有一点需要特别注意，那就是他们的先后顺序，要让他们遵守一个爱恨原则LoVe/　　　　　　　HAte,也就是Link--visited--hover--active。如果你把顺序搞错了会给你带来意想不到的错误

					其中:hover和:active又同时被列入到用户行为伪类中，他们所表达的意思是：

					:hover用于当用户把鼠标移动到元素上面时的效果；  :hover在IE6下只有a元素支持


					:active用于用户点击元素那一下的效果（正发生在点的那一下，松开鼠标左键此动作也就完成了） :active只有IE7-6不支持，


				　　:focus用于元素成为焦点，这个经常用在表单元素上。 :focus在IE6-7下不被支持。
							   




					:first-child选择某个元素的第一个子元素；
					:last-child选择某个元素的最后一个子元素；
					:nth-child()选择某个元素的一个或多个特定的子元素；
					:nth-last-child()选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；
					:nth-of-type()选择指定的元素；
					:nth-last-of-type()选择指定的元素，从元素的最后一个开始计算；
					:first-of-type选择一个上级元素下的第一个同类子元素；
					:last-of-type选择一个上级元素的最后一个同类子元素；
					:only-child选择的元素是它的父元素的唯一一个了元素；
					:only-of-type选择一个元素是它的上级元素的唯一一个相同类型的子元素；
					:empty选择的元素里面没有任何内容。
  
           选择属于其父级下的第n个元素，并且必须是p标签，直到匹配为止否则不生效
              p:nth-child(n){
              background:red;
              }     

            提示；n可以用来计算

        选择属于其父级下的第1个元素，并且必须是p标签否则不生效
          p；first-child{

              background；red;
          }


        选择属于其父级下的最后1个元素，并且必须是p标签，否则不生效
           p；last-child{
               background:red;
           }




        选择属于其父级下的第n个元素，并且一定会匹配p标签
            p:nth-of-type(n){
                background:red;
            }
          提示：n可以用来计算  2n-1选择奇数3n-1选择偶数
         
        <html>
           <head>
             <meat charset="UTF-8">
             <title>Document</title>
             <style>
                div{
                   width:920px;
                   margin；0 autol;
                   overflow:hidden;
                }

                span{
                   float:left;
                   width:300px;
                   height:300px;
                   border-radius:10px;
                   background:red;
                   text-align:center;
                   color:#fff;
                   font:100px/300px "simhei"font:字体大小/行高 的方式不起效果，必须还要同时给出字体粗细或者字体名称中的一个才会生效。
                   margin-top:10px;
                }
                span:nth-of-type(3n-1){
                margin-left:10px;
                margin-right:10px;
                }
            </style>
        </head>
        <body>
            <div>
               <span>1</span>
               <span>2</span>
               <span>3</span>
               <span>4</span>
               <span>5</span>
               <span>6</span>
            </div>
        </body>
        </html>   
        选择属于其父级下的第1 个元素，并且一定会匹配p标签
             p:first-of-type{
                 background:red;
             }


         选择属于其父级下的最后1个元素，并且一定会匹配p标签
              p:last-of-type{
                  background:red;
              }



css3文字和盒模型；
      自定义字体；
         @font-face{
            font-family；"自定义字体"
            src；
                url("字体图片的路径地址")，
                url("字体图片的路径地址")，
                url("字体图片的路径地址")，
                url("字体图片的路径地址");
            font-weight；;<!--加粗-->
            font-style:  ;<!--倾斜-->

         }
         .ttf
         .otf
         .woff
         .eot
         .svg
         http；//www.dafont.com/找字体的网站
         https://www.fontsquirrel.com/tools/webfont-generator 修改字体图片格式的线上工具 	
    字体图片；
         www.iconfont.cn



     怪异盒模型；

        box-sizing；盒模型的设置
       
        标准盒模型  content-box
             盒子的总宽度；
                    border-left+padding-left+width+padding-right+border-right
             盒子的总高度；
                    border-top+padding-top+height+padding-bottom+border-bottom

        怪异盒模型  border-box
               盒子的宽度；就是设置的width  会包含border+padding
               盒子的高度：就是设置的height 会包含 border+padding

    　弹性盒模型；
    　　　　　
    　　　　　弹性盒模型，不兼容，w3c目前还没有标准化，需要加浏览器内核s

               如果o建弹性盒模型，首先display:-mx;要在

               父级建立弹性盒模型的空间
               方法；
                   display；-webkit-box;
                   display:-moz-box;
                   display:-ms-box;
                   display:-o-box;
                   display:box;

     排列方式 有两种 水平 和垂直
			       -webkit-box-orient；vertical;垂直
			       -webkit-box-orient；horizontal; 水平 默认值

     子级的排列位置，可以给父级加-webkit-box-pack 来实现
     方法；
			         -webkit-box-pack ；
			         -moz-box-pack；    
			         -ms-box-pack ；
			         -o-box-pack ；
			         box-pack 


     相应的值有；
			         start 左边 默认值
			         center 中间
			         end 右边
			         justify 均分
 子级自己本身可以均分父级的宽度，根据自身的分数进行均分
     设置分数的方法
          给子级加
		             -webkit-box-flex；几份
		             比如；
		               -webkit-box-flex；1; 根据一份的宽度来计算 分一份
		               -webkit-box-flex；5; 根据一份的宽度来计算 分五份


          分栏；
				      -webkit-column-count：3;分几栏
				      -moz-column-count：3;
				      -ms-column-count：3;
				      -o-column-count：3;
				      column-count：3;
				      column-gap；100px;分栏之间的间隙， 数值越大 间隙越大
				      -webkit-column-gap；100px;
				      -moz-column-gap；100px;
				      -ms-column-gap；100px;
				      -o-column-gap；100px;



				      cloumn-rule；4px
				      solid  #fff; 类似border的设置，可以设置分栏之间的分界线
				       -webkit-cloumn-rule；4px
				      solid  #fff;
				        -moz-cloumn-rule；4px
				      solid  #fff;
				         -ms-cloumn-rule；4px
				      solid  #fff;
				         -o-cloumn-rule；4px
				      solid  #fff;


ie9以下不支持 火狐需要加前缀


  ！important   不推荐使用
      一般写在想要的样式后面把相应的样式的优先级提升至最高