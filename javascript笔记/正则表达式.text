正则的作用：快速查找并匹配相对应的字符串内容
  
  1.正则创建一
    var reg=new RegExp();

  2.正则创建二
    var reg = /lantian/;


正则常用函数
   test();
   判断字符串是否有符合正则规则的内容，返回值是bool类型

   exec();
   查找到符合正则表达式的字符串所在的源字符串的位置下标

规则一：全局查找 g
      g:从头查到尾
      var str="lhelo";
      var reg=/l/g;
      var value=str.replace(reg,"M");;
      console.log(value);
      案例：获得某个字符串的所有空格的个数
      var str="lan ou ni hao";
      var reg=/ /g;
      var num=0;
      while(reg.exec(str)){
          num++;
      }


规则二：不区分大小写 i
      var str="hello NBEST";
      var reg=/n/ig;
      var value=str.replace(reg,"lanoou");
      console.log(value);


规则三：任意字符 .
      var str="he9lenu";
      var reg=/e../g;
      console.log(str.replace(reg,"M"));


规则四：0个或者1个字符 ?
      问号：修饰的是前一个字符，代表前一个字符存在或者不存在
      var str="hello";
      //MhMMlMlMoM
      var reg=/e?/g;
      console.log(str.replace(reg,"M"));


规则五：代表0个或者N个 *
      星号：同样是修饰前一个字符存在0次或者N次
      var str="heleelo";
      //MhMMlMMlMoM
      var reg=/e*/g;
      console.log(str.replacce(reg,"M"));


规则六：代表1个或者N个 +
       加号：修饰前面的字符
       var str="heeleeeelo";
       //hMlMlo
       var reg=/e+/g;
       var value=str.replace(reg,"M");
       console.log(value);


规则七：重复的范围 {}
       修饰{}前面的字符
       {3}代表前面的字符必须有3个
       {1,3}代表前面的字符最少有1个，最多有3个
       {2,}代表最少2个，最多N个
       var str="heeeello";
       var reg=/e{2,}/g;
       var value=str.replace(reg,"M");
       console.log(value);


规则八：或规则 |
       var str="hello";
       var reg=/h|l|e|o/g;
       var value=str.replace(reg,"M");
       console.log(value);


规则九：或规则[]
       中括号：空格、特殊字符等也算是或的一种
       var str="hEll你好1234567890";
       var reg=/[hel ]/g;
       var reg=/[a-zA-Z]/g;


规则十：以什么开头 ^
       var str="hello";
       var reg=/^he/g;
       var value=reg.test(str);
       console.log(value);


规则十一：以什么 结尾 $
       var str="hello";
       var reg=/l$/g;
       var value=reg.test(str);
       console.log(value);

       案例：判断一个字符串是否事6位长度的数字
       var str="123456";
       var reg=/^[0-9]{6}$/g;
       var value=reg.test(str);
       cosole.log(value);


规则十二：取反规则 ^
       取反规则要和中括号一起使用
       var str="123hh&h";
       var reg=/[^a-zA-Z]/g;
       var value=str.replace(reg,"M");
       console.log(value);


规则十三：小括号规则
      var str="hehehello";
      var reg=/(he){3}/g;
      var value=str.replace(reg,"M");
      console.log(value);


    1.修饰整个正则表达式的内容，g和i
    2.修饰前一个或者前一个小括号括起来的内容，？，+ ，* ，{}
